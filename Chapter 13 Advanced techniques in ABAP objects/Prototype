*&---------------------------------------------------------------------*
*& Report Z_PROTOTYPE
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT z_prototype.

CLASS zcl_car DEFINITION ABSTRACT.
  PUBLIC SECTION.
    METHODS:
      clone ABSTRACT
        IMPORTING
                  iv_color         TYPE string
        RETURNING VALUE(ro_object) TYPE REF TO zcl_car.

ENDCLASS.                    "zcl_car_data DEFINITION

CLASS zcl_car_detail DEFINITION INHERITING FROM zcl_car.
  PUBLIC SECTION.

    METHODS: clone REDEFINITION.
    METHODS: constructor
      IMPORTING iv_type TYPE string.

    DATA: type_of_car TYPE string,
          color_car   TYPE string.

ENDCLASS.                    "zcl_car_Detail DEFINITION

CLASS zcl_car_detail IMPLEMENTATION.
  METHOD constructor.

    super->constructor( ).
    type_of_car = iv_type.

  ENDMETHOD.                    "create_car
  METHOD clone.

    DATA: lr_car TYPE REF TO zcl_car_detail.
    CREATE OBJECT lr_car
      EXPORTING
        iv_type = me->type_of_car.

    lr_car->color_car = iv_color.
    ro_object = lr_car.

  ENDMETHOD.                    "clone
ENDCLASS.                    "zcl_car_detail IMPLEMENTATION

CLASS zcl_factory DEFINITION.
  PUBLIC SECTION.
    METHODS:
      get_car
        IMPORTING iv_name       TYPE string
                  iv_color      TYPE string
        RETURNING VALUE(rv_car) TYPE REF TO zcl_car,
      constructor.
  PRIVATE SECTION.
    TYPES:
      BEGIN OF ts_prototype,
        name      TYPE string,
        prototype TYPE REF TO zcl_car,
      END OF ts_prototype,
      tt_prototypes TYPE STANDARD TABLE OF ts_prototype.
    DATA lt_prototypes TYPE tt_prototypes.
ENDCLASS.                    "zcl_factory DEFINITION

CLASS zcl_factory IMPLEMENTATION.
  METHOD constructor.
    DATA ls_prototype TYPE ts_prototype.
    ls_prototype-name = 'Car1'.
    CREATE OBJECT ls_prototype-prototype TYPE zcl_car_detail
      EXPORTING
        iv_type = 'Car1'.
    APPEND ls_prototype TO lt_prototypes.
  ENDMETHOD.

  METHOD get_car.
    READ TABLE lt_prototypes WITH KEY name = iv_name ASSIGNING FIELD-SYMBOL(<fs_prototype>).
    IF sy-subrc = 0.
      rv_car = <fs_prototype>-prototype->clone( iv_color ).
    ENDIF.
  ENDMETHOD.

ENDCLASS.                    "zcl_factory IMPLEMENTATION

START-OF-SELECTION.
  DATA: lr_factory TYPE REF TO zcl_factory,
        lr_car     TYPE REF TO zcl_car.
  CREATE OBJECT lr_factory.
  lr_car = lr_factory->get_car( EXPORTING iv_name = 'Car1' iv_color = 'Blue' ).
